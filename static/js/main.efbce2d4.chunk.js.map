{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onsubmit","event","setState","input","target","value","onbuttonOn","username","state","url","fetch","then","response","json","users","gitUsers","console","log","searchField","this","login","className","type","placeholder","onChange","onClick","alt","src","avatar_url","name","following","public_repos","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MA8FeA,G,kBA3Ed,aAAc,IAAD,8BACZ,+CAWCC,SAAW,SAACC,GACT,EAAKC,SAAS,CAACC,MAAQF,EAAMG,OAAOC,SAb5B,EAgBVC,WAAa,WAEX,EAAKJ,SAAS,CAACK,SAAU,EAAKC,MAAML,QAClC,IAAIM,EAAG,UApCH,+BAoCG,YAAa,EAAKD,MAAML,OACnCO,MAAMD,GAAKE,MAAK,SAAAC,GACf,OAAOA,EAASC,UAGhBF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAAEa,SAAUD,OAGzBE,QAAQC,IAAI,WA1BhB,EAAKT,MAAO,CACXO,SAAU,GACVR,SAAU,GACDW,YAAY,GACZf,MAAM,IANJ,E,sEAkCZ,OADAa,QAAQC,IAAIE,KAAKX,MAAMO,SAASK,OAI/B,yBAAKC,UAAU,OAMN,wBAAIA,UAAW,mBAAf,aAEG,yBAAKA,UAAU,iDACR,yBAAKA,UAAU,OAC1B,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,eACZC,SAAUL,KAAKnB,WAEjB,4BAAQqB,UAAU,GACHI,QAAUN,KAAKb,YAD9B,WAKA,yBAAKoB,IAAI,QAAQC,IAAKR,KAAKX,MAAMO,SAASa,aAC3C,6BAEC,wCAAcT,KAAKX,MAAMO,SAASK,OAClC,oCAAUD,KAAKX,MAAMO,SAASc,MAC9B,yCAAeV,KAAKX,MAAMO,SAASe,WACnC,qCAAWX,KAAKX,MAAMO,SAASgB,qB,GAjExBC,cCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.efbce2d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nconst API = 'https://api.github.com/users';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 90,\n      density: {\n        enable: true,\n        value_area: 1000\n      }\n    }\n  }\n}\n      \n\n     \nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state ={\n\t\t\tgitUsers: [],\n\t\t\tusername: '',\n            searchField:'',\n            input:''\n\t\t}\n\t\n\t}\n\n\t\n\t\t onsubmit = (event) => {\n\t\t    this.setState({input : event.target.value});\n\t\t    \n\t\t  }\n\t\t  onbuttonOn = () => {\n\n\t\t    this.setState({username: this.state.input});\n\t\t\t\t    let url = `${API}/${this.state.input}`;\n\t\t\t\tfetch(url).then(response=> {\n\t\t\t\t\treturn response.json()\n\n\t\t\t\t})\n\t\t\t\t.then(users=> {\n\t\t\t\t\tthis.setState({ gitUsers: users})\n\t\t            \n\t\t\t\t});\n\t\t    console.log('submit');\n\t\t    \n\t\t  }\n\trender() {\n\t\t//console.log(this.state.gitUsers);\n\t\tconsole.log(this.state.gitUsers.login);\n\t\treturn (\n\t\t\t\n\t\t\t\n\t\t\t<div className='tc ' >\n           \n                 \n           \n\n\t\t           \n           \t<h1 className= 'f1 b--dark-blue'> GitBook </h1>\n              \n               <div className='tc  bg-dark-blue br3 pa3 ma2 dib bw2 shadow-5'>\n                      <div className='pa2'>\n\t\t\t\t\t      <input\n\t\t\t\t\t        className='pa3 ba b--green bg-lightest-blue'\n\t\t\t\t\t        type='search'\n\t\t\t\t\t        placeholder='search users'\n\t\t\t\t\t        onChange={this.onsubmit}\n\t\t\t\t\t      />\n\t\t\t\t\t      <button className=''\n                          onClick ={this.onbuttonOn}\n                          >Detect</button>\n\n\t\t\t\t\t    </div>\n      \t\t\t\t\t<img alt='users' src={this.state.gitUsers.avatar_url} />\n      \t\t\t\t<div>\n        \t\t\t\n        \t\t\t<p>Username: {this.state.gitUsers.login}</p>\n        \t\t\t<p>Name: {this.state.gitUsers.name}</p>\n        \t\t\t<p>Following: {this.state.gitUsers.following}</p>\n        \t\t\t<p>Repos: {this.state.gitUsers.public_repos}</p>\n\n\n      \t\t\t\t</div>\n    \t\t\t</div>\n           </div>\n          \n\t\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}